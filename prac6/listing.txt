
   1 import library.*;
   2 
   3 COMPILER Calc  $CN
   4 /* Simple five function calculator with 26 memory cells 
   5    P.D. Terry, Rhodes University; modified by KB, 2021 */
   6 
   7 
   8       static int[] mem = new int[26];
   9 
  10 
  11 CHARACTERS
  12   digit      = "0123456789" .
  13   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" .
  14 
  15 TOKENS
  16   Number  = digit { digit } .
  17   Variable   = letter .
  18   
  19 IGNORE CHR(0) .. CHR(31)
  20 
  21 /* I used SYNC for the semicolons because it's always used to end the production. */
  22 /* I used weak WEAK for '=' because a user my forget to include it */
  23 PRODUCTIONS
  24   Calc                                    (. int index = 0; int value = 0;
  25                                              for (int i = 0; i < 26; i++) 
  26 											   mem[i] = 0; .)
  27   = { ( Variable                   		  (. index = token.val.charAt(0) - 'A'; .)
  28       WEAK "=" 								  
  29       Expression<out value>				  (. mem[index] = value; IO.writeLine(value);.)
  30 	 SYNC ";" )
  31 	  | ( "print" Expression<out value>   (. IO.writeLine(value); .)
  32 	    SYNC";" )
  33     } EOF .
  34 
  35 
  36   Expression<out int expValue>			  (. int andValue = 0; .)
  37   = AndExp<out expValue> 
  38   { "||" AndExp<out andValue>             (. boolean exp = (expValue == 1);
  39 											 boolean and = (andValue == 1);
  40 											 if ( exp || and) expValue = 1;
  41 											 else expValue = 0;
  42 
  43 										  .)
  44 
  45   } .
  46 
  47   AndExp<out int andValue>				  (. int eqlValue = 0; .)
  48   = EqlExp<out andValue>
  49 	{ "&&" EqlExp<out eqlValue>			  (. boolean eql = (eqlValue == 1);
  50 											 boolean and = (andValue == 1);
  51 											if ( and && eql ) {
  52 											andValue = 1;
  53 
  54 											}
  55 											else andValue = 0;
  56 
  57 										  .)
  58 	} .
  59 
  60   EqlExp<out int eqlValue>				   (. int relValue = 0; .)
  61   = RelExp<out eqlValue> 
  62   {  "==" RelExp<out relValue>			  (. if (eqlValue == relValue) eqlValue = 1;
  63 											 else eqlValue = 0;
  64 											 .)
  65   | "!=" RelExp<out relValue>			  (. if (eqlValue != relValue) eqlValue = 0;
  66 
  67 											 else eqlValue = 0;
  68 											 .)
  69    } .
  70 
  71   RelExp<out int relValue>				 (. int addValue = 0; .)
  72   = AddExp<out relValue>
  73 	{ ( "<" AddExp<out addValue>    (. if ( relValue < addValue) relValue = 1;
  74 										else relValue = 0;
  75 										.)
  76 
  77 	| "<=" AddExp<out addValue>     (. if ( relValue <= addValue) relValue = 1;
  78 										else relValue = 0;
  79 										.)
  80 	| ">" AddExp<out addValue>		(. if ( relValue > addValue) relValue = 1;
  81 										else relValue = 0;
  82 										.)
  83 
  84 	| ">=" AddExp<out addValue>     (. if ( relValue >= addValue) relValue = 1;
  85 										else relValue = 0;
  86 										.)
  87 					)  } .
  88   
  89   AddExp<out int addValue>            (. int  termValue = 0; .)
  90   = Term<out addValue>
  91     {   "+" Term<out termValue>           (.  addValue = addValue + termValue; .)
  92       | "-" Term<out termValue>           (. addValue = addValue - termValue; .)
  93 	} .
  94 
  95 
  96   Term<out int termValue>                 (. int factValue = 0; .)
  97   = Factor<out termValue>
  98     {   "*" Factor<out factValue>         (. termValue = termValue * factValue; .)
  99       | "/" Factor<out factValue>         (. 
 100 											if (factValue == 0)	SemError("Division by zero");
 101 											else termValue = termValue / factValue; .)
 102 	  | "%" Factor<out factValue>		  (. 
 103 												if (factValue == 0)
 104 													SemError("Moding by zero");
 105 												else termValue = termValue % factValue; 
 106 												.)
 107 
 108     } .
 109 
 110   Factor<out int factValue>               (. factValue = 0; .)
 111   =   Number                              (. try {
 112                                                factValue = Integer.parseInt(token.val);
 113                                              } catch (NumberFormatException e) {
 114                                                factValue = 0; SemError("number out of range");
 115                                              } .)
 116 	| Variable			                   (. int index = token.val.charAt(0) - 'A';
 117                                                factValue = mem[index]; .)
 118 	| "true"							  (. factValue = 1; .)
 119 
 120 	| "false"							  (. factValue = 0; .)
 121 
 122     | "(" Expression<out factValue>
 123       ")" .
 124 
 125 END Calc.

0 errors detected
