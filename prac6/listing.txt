
   1 import library.*;
   2 
   3 COMPILER Calc  $CN
   4 /* Simple five function calculator with 26 memory cells 
   5    P.D. Terry, Rhodes University; modified by KB, 2021 */
   6 
   7 
   8       static int[] mem = new int[26];
   9 
  10 
  11 CHARACTERS
  12   digit      = "0123456789" .
  13   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" .
  14 
  15 TOKENS
  16   Number  = digit { digit } .
  17   Variable   = letter .
  18   
  19 IGNORE CHR(0) .. CHR(31)
  20 
  21 PRODUCTIONS
  22   Calc                                    (. int index = 0; int value = 0;
  23                                              for (int i = 0; i < 26; i++) 
  24 											   mem[i] = 0; .)
  25   = { ( Variable                   		  (. index = token.val.charAt(0) - 'A'; .)
  26       WEAK "=" 								  
  27       Expression<out value>				  (. mem[index] = value; IO.writeLine(value);.)
  28 	 SYNC ";" )
  29 	  | ( "print" Expression<out value>   (. IO.writeLine(value); .)
  30 	    SYNC";" )
  31     } EOF .
  32 
  33   Expression<out int expValue>            (. int termValue = 0; .)
  34   = Term<out expValue>
  35     {   "+" Term<out termValue>           (. expValue = expValue + termValue; .)
  36       | "-" Term<out termValue>           (. expValue = expValue - termValue; .)
  37 	  | "&&" Term<out termValue>
  38 	  | "==" Term<out termValue>
  39 	  | "!=" Term<out termValue>
  40 	  | "<" Term<out termValue>
  41 	  | ">" Term<out termValue>
  42 	  | "<=" Term<out termValue>
  43 	  | ">=" Term<out termValue>
  44     } .
  45 
  46   Term<out int termValue>                 (. int factValue = 0; .)
  47   = Factor<out termValue>
  48     {   "*" Factor<out factValue>         (. termValue = termValue * factValue; .)
  49       | "/" Factor<out factValue>         (. termValue = termValue / factValue; .)
  50 	  | "%" Factor<out factValue>		  (. termValue = termValue % factValue; .)
  51     } .
  52 
  53   Factor<out int factValue>               (. factValue = 0; .)
  54   =   Number                              (. try {
  55                                                factValue = Integer.parseInt(token.val);
  56                                              } catch (NumberFormatException e) {
  57                                                factValue = 0; SemError("number out of range");
  58                                              } .)
  59 	| Variable			                   (. int index = token.val.charAt(0) - 'A';
  60                                                factValue = mem[index]; .)
  61 	| "true"							  (. factValue = 1; .)
  62 
  63 	| "false"							  (. factValue = 0; .)
  64 
  65     | "(" Expression<out factValue>
  66       ")" .
  67 
  68 END Calc.

0 errors detected
