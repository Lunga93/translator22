
   1 import library.*;
   2 
   3 COMPILER Calc  $CN
   4 /* Simple five function calculator with 26 memory cells 
   5    P.D. Terry, Rhodes University; modified by KB, 2021 */
   6 
   7 
   8       static int[] mem = new int[26];
   9 
  10 
  11 CHARACTERS
  12   digit      = "0123456789" .
  13   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" .
  14 
  15 TOKENS
  16   Number  = digit { digit } .
  17   Variable   = letter .
  18   
  19 IGNORE CHR(0) .. CHR(31)
  20 
  21 PRODUCTIONS
  22   Calc                                    (. int index = 0; int value = 0;
  23                                              for (int i = 0; i < 26; i++) 
  24 											   mem[i] = 0; .)
  25   = { ( Variable                   		  (. index = token.val.charAt(0) - 'A'; .)
  26       WEAK "=" 								  
  27       Expression<out value>				  (. mem[index] = value; IO.writeLine(value);.)
  28 	 SYNC ";" )
  29 	  | ( "print" Expression<out value>   (. IO.writeLine(value); .)
  30 	    SYNC";" )
  31     } EOF .
  32 
  33 
  34   Expression<out int expValue> = AndExp<out expValue> { "||" AndExp<out andValue> } .
  35   AndExp<out int andValue> = EqlExp<out andValue> { "&&" EqlExp<out eqlValue> } .
  36   EqlExp<out int eqlValue> = RelExp<out eqlValue> {  "==" RelExp<out relValue>
  37 					| "!=" RelExp<out<out relValue>
  38 				  } .
  39   RelExp<out int relValue> = AddExp<out relValue>
  40 				{ ( "<" AddExp<out addValue
  41 					| "<=" AddExp<out addValue
  42 					| ">" AddExp<out addValue
  43 					| ">=" AddExp<out addValue
  44 					)  } .
  45   
  46   AddExp<out int addValue>            (. int  addValue = 0; .)
  47   = Term<out addValue>
****   ^ "|" expected
  48     {   "+" Term<out termValue>           (.  addValue = addValue + termValue; .)
  49       | "-" Term<out termValue>           (. addValue = addValue - termValue; .)
  50 	} .
  51 
  52 
  53   Term<out int termValue>                 (. int factValue = 0; .)
  54   = Factor<out termValue>
  55     {   "*" Factor<out factValue>         (. termValue = termValue * factValue; .)
  56       | "/" Factor<out factValue>         (. termValue = termValue / factValue; .)
  57 	  | "%" Factor<out factValue>		  (. termValue = termValue % factValue; .)
  58 
  59     } .
  60 
  61   Factor<out int factValue>               (. factValue = 0; .)
  62   =   Number                              (. try {
  63                                                factValue = Integer.parseInt(token.val);
  64                                              } catch (NumberFormatException e) {
  65                                                factValue = 0; SemError("number out of range");
  66                                              } .)
  67 	| Variable			                   (. int index = token.val.charAt(0) - 'A';
  68                                                factValue = mem[index]; .)
  69 	| "true"							  (. factValue = 1; .)
  70 
  71 	| "false"							  (. factValue = 0; .)
  72 
  73     | "(" Expression<out factValue>
  74       ")" .
  75 
  76 END Calc.

1 errors detected
